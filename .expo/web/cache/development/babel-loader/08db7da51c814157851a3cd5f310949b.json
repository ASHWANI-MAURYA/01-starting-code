{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext, useState } from 'react';\nimport AuthContent from \"../components/Auth/AuthContent\";\nimport { createUser } from \"../util/auth\";\nimport LoadingOverlay from \"../components/ui/LoadingOverlay\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { AuthContext } from \"../store/auth-context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction SignupScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAuthenticating = _useState2[0],\n      setIsAuthenticating = _useState2[1];\n\n  useContext(AuthContext);\n\n  function signupHandler(_ref) {\n    var email, password;\n    return _regeneratorRuntime.async(function signupHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref.email, password = _ref.password;\n            setIsAuthenticating(true);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(createUser(email, password));\n\n          case 5:\n            _context.next = 11;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](2);\n            Alert.alert('Authentication failed!', 'could not login. please check your Email and password');\n            window.alert('Authentication failed!', 'could not login. please check your Email and password');\n\n          case 11:\n            setIsAuthenticating(false);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 7]], Promise);\n  }\n\n  if (isAuthenticating) {\n    return _jsx(LoadingOverlay, {\n      message: \"Creating User..\"\n    });\n  }\n\n  return _jsx(AuthContent, {\n    onAuthenticate: signupHandler\n  });\n}\n\nexport default SignupScreen;","map":{"version":3,"names":["useContext","useState","AuthContent","createUser","LoadingOverlay","AuthContext","SignupScreen","isAuthenticating","setIsAuthenticating","signupHandler","email","password","Alert","alert","window"],"sources":["C:/Users/ashwa/OneDrive/Desktop/01-starting-code/screens/SignupScreen.js"],"sourcesContent":["import { useContext, useState } from 'react';\nimport AuthContent from '../components/Auth/AuthContent';\nimport { createUser } from '../util/auth';\nimport LoadingOverlay from '../components/ui/LoadingOverlay'\nimport { Alert } from 'react-native';\nimport { AuthContext } from '../store/auth-context';\nfunction SignupScreen() {\n  const [isAuthenticating, setIsAuthenticating]= useState(false);\n  useContext(AuthContext);\n\n\n  async function signupHandler({email, password}) {\n    setIsAuthenticating(true);\n    try{\n      await createUser(email, password);\n    }catch(error){\n      Alert.alert('Authentication failed!', 'could not login. please check your Email and password')\n      window.alert('Authentication failed!', 'could not login. please check your Email and password')\n    }\n    setIsAuthenticating(false);\n  }\n\n  if(isAuthenticating){\n    return <LoadingOverlay message=\"Creating User..\"/>\n  }\n\n\n  return <AuthContent onAuthenticate={signupHandler} />;\n}\n\nexport default SignupScreen;\n"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,OAAOC,WAAP;AACA,SAASC,UAAT;AACA,OAAOC,cAAP;;AAEA,SAASC,WAAT;;;AACA,SAASC,YAAT,GAAwB;EACtB,gBAA+CL,QAAQ,CAAC,KAAD,CAAvD;EAAA;EAAA,IAAOM,gBAAP;EAAA,IAAyBC,mBAAzB;;EACAR,UAAU,CAACK,WAAD,CAAV;;EAGA,SAAeI,aAAf;IAAA;IAAA;MAAA;QAAA;UAAA;YAA8BC,KAA9B,QAA8BA,KAA9B,EAAqCC,QAArC,QAAqCA,QAArC;YACEH,mBAAmB,CAAC,IAAD,CAAnB;YADF;YAAA;YAAA,iCAGUL,UAAU,CAACO,KAAD,EAAQC,QAAR,CAHpB;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAKIC,KAAK,CAACC,KAAN,CAAY,wBAAZ,EAAsC,uDAAtC;YACAC,MAAM,CAACD,KAAP,CAAa,wBAAb,EAAuC,uDAAvC;;UANJ;YAQEL,mBAAmB,CAAC,KAAD,CAAnB;;UARF;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;;EAWA,IAAGD,gBAAH,EAAoB;IAClB,OAAO,KAAC,cAAD;MAAgB,OAAO,EAAC;IAAxB,EAAP;EACD;;EAGD,OAAO,KAAC,WAAD;IAAa,cAAc,EAAEE;EAA7B,EAAP;AACD;;AAED,eAAeH,YAAf"},"metadata":{},"sourceType":"module"}